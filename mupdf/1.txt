int font_obj_cur=0;
pdf_obj *font_obj, *font_desc, *font_ttf, *font_rdb;
pdf_font_desc *font;
void dropFontTemp(){
	if(!font_ttf){
		pdf_drop_obj(ctx,font_ttf);
		font_ttf=NULL;
	}
	if(!font_desc){
		pdf_drop_obj(ctx,font_desc);
		font_desc=NULL;
	}
	if(!font_obj){
		pdf_drop_obj(ctx, font_obj);
		font_obj=NULL;
	}
}

static void
svg_path_moveto(fz_context *ctx, void *arg, float x, float y)
{
	fz_output *out = (fz_output *)arg;
	fz_write_printf(ctx, out, "M %g %g ", x, y);
}

static void
svg_path_lineto(fz_context *ctx, void *arg, float x, float y)
{
	fz_output *out = (fz_output *)arg;
	fz_write_printf(ctx, out, "L %g %g ", x, y);
}

static void
svg_path_curveto(fz_context *ctx, void *arg, float x1, float y1, float x2, float y2, float x3, float y3)
{
	fz_output *out = (fz_output *)arg;
	fz_write_printf(ctx, out, "C %g %g %g %g %g %g ", x1, y1, x2, y2, x3, y3);
}

static void
svg_path_close(fz_context *ctx, void *arg)
{
	fz_output *out = (fz_output *)arg;
	fz_write_printf(ctx, out, "Z ");
}

static const fz_path_walker svg_path_walker =
{
	svg_path_moveto,
	svg_path_lineto,
	svg_path_curveto,
	svg_path_close
};

EMSCRIPTEN_KEEPALIVE
const char *loadFontName()
{
	int len = pdf_count_objects(ctx, doc);
	font_obj_cur+=1;
	for(;font_obj_cur<len;font_obj_cur++){
		dropFontTemp();
		font_obj = pdf_new_indirect(ctx, doc, font_obj_cur, 0);
		font_desc = pdf_dict_get(ctx, font_obj, PDF_NAME(FontDescriptor));
		if(!font_desc) continue;
		font_ttf = pdf_dict_get(ctx, font_desc, PDF_NAME(FontFile2));
		if(!font_ttf) continue;
		font = pdf_load_font(ctx, doc, NULL, font_obj);
		return font->font->name;
	}
	dropFontTemp();
	return "(finish)";
}

EMSCRIPTEN_KEEPALIVE
char *loadFontFile()
{
	fz_buffer *buf = fz_new_buffer(ctx, 0);
	fz_output *out = fz_new_output_with_buffer(ctx, buf);
	fz_matrix font_matrix = {
		1000.0/15, 0, 0, 1000.0/15, 0, 0
	};
	say_str(font->font->name);
	//for(int i=0;i<font->cid_to_ucs_len;i++){
	//	if(font->cid_to_ucs[i]!=65533){
	//		say_int(i);
	//		say_int(font->cid_to_ucs[i]);
	//	}
	//}

	//for(char i=0;i<127;i++){
	//	fz_path *path = fz_outline_glyph(ctx, font->font, i, font_matrix);	
	//	fz_write_printf(ctx, out, "<glyph unicode=\"&#%d\" d=\"", i);
	//	fz_walk_path(ctx, path, &svg_path_walker, out);
	//	fz_write_printf(ctx, out, "\" />\n");
	//}
	fz_close_output(ctx, out);
	return bufferToString(ctx, buf);
}